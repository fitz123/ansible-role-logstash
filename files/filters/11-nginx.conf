filter {
  if [type] == "nginx" {
    if ("access" in [tags]) {
      grok {
        patterns_dir => ["/etc/logstash/patterns/"]
        match => [
          "message", "%{NGINXACCESS_MOD5}",
          "message", "%{NGINXACCESS}",
          "message", "%{NGINXACCESS_MOD4}",
          "message", "%{NGINXACCESS_MOD3}",
          "message", "%{NGINXACCESS_MOD2}",
          "message", "%{NGINXACCESS_MOD}"
        ]
      }
      if ([client][useragent]) { 
        useragent {
          source => "[client][useragent]"
          target => "[client][agent]"
        }
      }
      if ([client][ip] and [client][useragent]) {
        mutate {
          add_field => [ "[client][uniq_id]", "%{[client][ip]}_%{[client][useragent]}" ]
        }
      }
      date {
        match => [ "ngacctimestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
        remove_field => [ "ngacctimestamp" ]
        add_tag => ["timestamp_changed"]
      }
    }
    if ("error" in [tags]) {
      grok {
        patterns_dir => ["/etc/logstash/patterns/"]
        match => {
          "message" => [
            "%{NGINXERRORLONGPREX} (?<error.type>NAXSI)_FMT: %{GREEDYDATA:naxsi_src}, client:",
            "%{NGINXERRORLONGPREX} (?<error.type>NAXSI)_FMT: %{GREEDYDATA:naxsi_src}",
            "%{NGINXERRORLONGPREX} (?<error.type>NAXSI)_EXLOG: %{GREEDYDATA:naxsi_src}, client:",
            "%{NGINXERRORLONGPREX} (?<error.type>NAXSI)_EXLOG: %{GREEDYDATA:naxsi_src}"
          ]
        }
        tag_on_failure => []
        add_tag => ["naxsi"]
      }
      if ([naxsi_src]) {
        kv {
          field_split => "&"
          source => "naxsi_src"
          target => "naxsi"
          value_split => "="
          trimkey => "0123456789"
          include_keys => [ 
            "ip", "server", "uri", "learning", "vers", "total_processed", "total_blocked", "block", "content", "cscore", "score", "zone", "id", "var_name" ]
          remove_field => [ "naxsi_src" ]
        }
        geoip {
          source => "[naxsi][ip]"
          target => "geoip"
          database => "/etc/logstash/GeoLiteCity.dat"
          remove_field => [ "[geoip][latitude]", "[geoip][longitude]", "[geoip][country_code2]", "[geoip][country_code3]", "[geoip][region_name]", "[geoip][ip]" ]
        }
      }
      if ("static" in [tags]) and !("naxsi" in [tags]) {
        grok {
          patterns_dir => ["/etc/logstash/patterns/"]
          match => {
            "message" => [
              "%{NGINXERRORLONGPREX} %{FUNCTION} \"%{PATH:[error.fullpath]}\"%{GREEDYDATA:errormessage}",
              "%{NGINXERRORLONGPREX} %{FUNCTION} %{GREEDYDATA:errormessage}",
              "%{NGINXERRORLONGPREX} %{GREEDYDATA:errormessage}",
              "%{NGINXERRORMIDLPREX} %{GREEDYDATA:errormessage}",
              "%{NGINXERRORSHRTPREX} %{GREEDYDATA:errormessage}",
              "%{DATESTAMP:ngerrtimestamp} %{GREEDYDATA:errormessage}"
            ]
          }
        }
        grok {
          patterns_dir => ["/etc/logstash/patterns/"]
          match => {
            "errormessage" => [
              "(?<error.type>limiting connections) by zone \"%{WORD:zone}\"",
              "(?<error.type>limiting requests), excess: %{NUMBER:excess:int} by zone \"%{WORD:zone}\"",
              "\((?<error.type>%{NUMBER}:%{DATA})\)",
              "(?<error_p1>%{DATA})\"%{PATH:[error.fullpath]}\"%{DATA:error_p2},",
              "(?<error.type>access forbidden by rule),",
              "%{DATA:error.type}, client:",
              "%{DATA:error.type} \"%{DATA}\"",
              "%{DATA:error.type}\(\)"
            ]
          }
        }
        if [error_p1] =~ /.+/ {
          mutate {
            add_field => [ "error.type", "%{error_p1}%{error_p2}" ]
            remove_field => [ "error_p1", "error_p2" ]
            gsub => [ "error_p1", " of ", "" ]
            gsub => [ "error_p1", " in ", "" ]
          }
        }
      }
      if ("fastcgi" in [tags]) and !("naxsi" in [tags]) {
        grok {
          patterns_dir => ["/etc/logstash/patterns/"]
          match => {
            "message" => [
              "%{NGINXERRORLONGPREX} %{PHPLONGPREF}  %{FUNCTION}:%{GREEDYDATA:errormessage}",
              "%{NGINXERRORLONGPREX} %{PHPLONGPREF}%{GREEDYDATA:errormessage}",
              "%{NGINXERRORLONGPREX} FastCGI sent in stderr:%{GREEDYDATA:errormessage}",
              "%{NGINXERRORSHRTPREX} %{GREEDYDATA:errormessage}",
              "%{DATESTAMP:ngerrtimestamp} %{GREEDYDATA:errormessage}",
              "%{PHPSHRTPREF}  %{FUNCTION}:%{GREEDYDATA:errormessage}",
              "%{PHPSHRTPREF}%{GREEDYDATA:errormessage}"
            ]
          }
        }
        grok {
          patterns_dir => ["/etc/logstash/patterns/"]
          match => {
            "errormessage" => [
              "(?<error.type>limiting connections) by zone \"%{WORD:zone}\"",
              "(?<error.type>limiting requests), excess: %{NUMBER:excess:int} by zone \"%{WORD:zone}\"",
              "(?<error.type>upstream timed out \(%{NUMBER}:%{DATA}\) while reading response header from upstream)",
              "(?<error.type>upstream timed out \(%{NUMBER}:%{DATA}\) while connecting to upstream)",
              "(?<error.type>\"Primary script unknown\" while reading response header from upstream)",
              "\((?<error.type>%{NUMBER}:%{DATA})\)",
              "(?<error.type>%{DATA}) in %{PATH:[error.fullpath]}",
              ".%{DATA:error.type}, client:"
            ]
          }
        }
        mutate {
          strip => [ "error.type" ]
          lowercase => [ "phpseverity" ]
          merge => [ "severity", "phpseverity" ]
          remove_field => [ "phpseverity" ]
        }
      }
      grok {
        patterns_dir => ["/etc/logstash/patterns/"]
        match => {
          "errormessage" => [
            "client: %{IP:[client][ip]},",
            "server: %{DATA:[response][server]},",
            "request: %{REQUEST},",
            "host: \"%{DATA:request.host}\"",
            "upstream: \"%{DATA:response.upstream}\",",
            "referrer: \"%{DATA:client.referrer}\""
          ]
        }
        break_on_match => false
        tag_on_failure => []
      }
      if ([error.fullpath] =~ /.+/) {
        grok {
          patterns_dir => ["/etc/logstash/patterns/"]
          match => { "[error.fullpath]" => "^%{GREEDYDATA:[error][filepath]}/%{GREEDYDATA:[error][filename]}\.(?<error.filetype>[a-zA-Z0-9]+)$" }
          tag_on_failure => []
        }
        if [error][filepath] {
          mutate {
            rename => [ "error.filetype", "[error][filetype]" ]
          }
        } 
        else if [error][filename] {
          mutate { 
            replace => [ "[error][filepath]", "/" ]
          } 
        }
      }
      date {
        match => [ "ngerrtimestamp", "YY/MM/dd HH:mm:ss" ]
        add_tag => ["timestamp_changed"]
        remove_field => [ "ngerrtimestamp" ]
      }
      mutate {
        rename => [ "error.type", "[error][type]" ]
        rename => [ "error.fullpath", "[error][fullpath]" ]
        rename => [ "request.host", "[request][host]" ]
        rename => [ "client.referrer", "[client][referrer]" ]
        rename => [ "response.upstream", "[response][upstream]" ]
        remove_field => [ "errormessage" ]
        remove_tag => [ "naxsi" ]
      } 
    }
    if ([request][uri] =~ /.+/) {
      grok {
        patterns_dir => ["/etc/logstash/patterns/"]
        match => { "[request][uri]" => "^%{GREEDYDATA:[request][fullpath]}\?%{GREEDYDATA:[request][fullquery]}$" }
        add_tag => [ "uri-path-and-query" ]
        tag_on_failure => []
      }
      # if don't have both then assume no query
      if ("uri-path-and-query" not in [tags]) {
        mutate { add_field => [ "[request][fullpath]", "%{[request][uri]}" ] }
      }
      else { 
        kv {
          source => "[request][fullquery]"
          target => "[request][query]"
          field_split => "&"
          value_split => "="
          remove_tag => [ "uri-path-and-query" ]
        } 
      }
      if ([request][fullpath] =~ /.+/) {
        grok {
          patterns_dir => ["/etc/logstash/patterns/"]
          match => { "[request][fullpath]" => "^%{GREEDYDATA:[request][filepath]}/%{GREEDYDATA:[request][filename]}\.(?<request_filetype>[a-zA-Z0-9]+)$" }
          remove_tag => [ "uri-path-and-query" ]
          tag_on_failure => []
        }
        if [request][filepath] {
          mutate {
            rename => [ "request_filetype", "[request][filetype]" ]
          }
        }
        else if [request][filename] {
          mutate { 
            replace => [ "[request][filepath]", "/" ]
          } 
        } 
      }
    }
    geoip {
      source => "[client][ip]"
      target => "geoip"
      database => "/etc/logstash/GeoLiteCity.dat"
      remove_field => [ "[geoip][latitude]", "[geoip][longitude]", "[geoip][country_code2]", "[geoip][country_code3]", "[geoip][region_name]", "[geoip][ip]" ]
    }
  }
}

