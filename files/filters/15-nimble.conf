filter {
  if [type] == "nimble" {
      grok {
        patterns_dir => ["/etc/logstash/patterns/"]
        match => [
          "message", "%{NIMBLEACCESS}"
        ]
      }
      if ([client][useragent]) { 
        useragent {
          source => "[client][useragent]"
          target => "[client][agent]"
        }
      }
      if ([client][ip] and [client][useragent]) {
        mutate {
          add_field => [ "[client][uniq_id]", "%{[client][ip]}_%{[client][useragent]}" ]
        }
      }
      date {
        match => [ "nmblacctimestamp" , "YYYY-MM-dd HH:mm:ss" ]
        remove_field => [ "nmblacctimestamp" ]
        add_tag => ["timestamp_changed"]
      }
    if ([request][uri] =~ /.+/) {
      grok {
        patterns_dir => ["/etc/logstash/patterns/"]
        match => { "[request][uri]" => "^%{GREEDYDATA:[request][fullpath]}\?%{GREEDYDATA:[request][fullquery]}$" }
        add_tag => [ "uri-path-and-query" ]
        tag_on_failure => []
      }
      # if don't have both then assume no query
      if ("uri-path-and-query" not in [tags]) {
        mutate { add_field => [ "[request][fullpath]", "%{[request][uri]}" ] }
      }
      else { 
        kv {
          source => "[request][fullquery]"
          target => "[request][query]"
          field_split => "&"
          value_split => "="
          remove_tag => [ "uri-path-and-query" ]
        } 
      }
      if [request][fullpath] {
        grok {
          patterns_dir => ["/etc/logstash/patterns/"]
          match => { "[request][fullpath]" => "^%{GREEDYDATA:[request][filepath]}/%{GREEDYDATA:[request][filename]}\.(?<request.filetype>[a-zA-Z0-9]+)$" }
          remove_tag => [ "uri-path-and-query" ]
          tag_on_failure => []
        }
        if [request.filetype] {
          mutate {
            rename => [ "request.filetype", "[request][filetype]" ]
          }
        }
        else if [request][filename] {
          mutate { 
            replace => [ "[request][filepath]", "/" ]
          } 
        } 
      }
    }
    geoip {
      source => "[client][ip]"
      target => "geoip"
      database => "/etc/logstash/GeoLiteCity.dat"
      remove_field => [ "[geoip][latitude]", "[geoip][longitude]", "[geoip][country_code2]", "[geoip][country_code3]", "[geoip][region_name]", "[geoip][ip]" ]
    }
  }
}
